input {
  # Reads docker logs
  tcp {
    port => 5044
    codec => json
  }
  # For direct log file reading (if needed later)
  # file {
  #   path => "/var/log/backend/*.log"
  #   start_position => "beginning"
  #   codec => json
  # }
  beats {
    port => 5044
  }
  udp {
    port => 5045
    codec => json
  }
}

filter {
  if [message] {
    # Try to parse the message as JSON if it's not already parsed
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
        target => "parsed_log"
      }
      
      # Flatten the parsed log to the top level
      ruby {
        code => "
          event.get('parsed_log').each do |k,v|
            event.set(k,v)
          end
          event.remove('parsed_log')
        "
      }
    }
  }
  
  # Extract timestamp
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
    remove_field => ["timestamp"]
  }
  
  # Add container information
  mutate {
    add_field => {
      "container.name" => "nestjs-backend"
      "container.image" => "devopsnestjs-backend"
    }
  }
  
  # Set document type
  if [level] == "error" {
    mutate {
      add_field => { "type" => "error" }
    }
  } else if [level] == "warn" {
    mutate {
      add_field => { "type" => "warning" }
    }
  } else {
    mutate {
      add_field => { "type" => "info" }
    }
  }

  if [type] == "container" {
    json {
      source => "message"
    }
  }
}

output {
  # Debug output to console
  stdout {
    codec => rubydebug
  }
  
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["${ELASTICSEARCH_HOSTS}"]
    user => "${ELASTICSEARCH_USER}"
    password => "${ELASTICSEARCH_PASSWORD}"
    index => "logstash-%{+YYYY.MM.dd}"
    ssl_certificate_verification => false
  }
} 